trigger:
  branches:
    include:
      - main
      - master

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  outputDir: '$(Build.ArtifactStagingDirectory)/publish'
  reactBuildDir: 'Xbl.Web.UI/build'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: 'Publish Xbl.Web'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'Xbl.Web/Xbl.Web.csproj'
    arguments: '--configuration $(buildConfiguration) --output $(outputDir)'
    zipAfterPublish: false

# Build React app
- task: NodeTool@0
  displayName: 'Install Node.js'
  inputs:
    versionSpec: '20.x'

- task: Npm@1
  inputs:
    command: 'install'
    workingDir: 'Xbl.Web.UI'
  displayName: 'Restore Xbl.Web.UI'

- task: Npm@2
  inputs:
    command: 'custom'
    workingDir: 'Xbl.Web.UI'
    customCommand: 'run build'
  displayName: 'Publish Xbl.Web.UI'  

# Copy React build output to wwwroot of published .NET app
- task: CopyFiles@2
  displayName: 'Publish Xbl.Web.UI'
  inputs:
    SourceFolder: '$(reactBuildDir)'
    Contents: '**'
    TargetFolder: '$(outputDir)/wwwroot'

- task: ArchiveFiles@2
  displayName: 'Archive deployment package'
  inputs:
    rootFolderOrFile: '$(outputDir)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/XblWebApp.zip'
    replaceExistingArchive: true

- publish: '$(Build.ArtifactStagingDirectory)/XblWebApp.zip'
  displayName: 'Publish Artifact'
  artifact: 'drop'

- task: AzureWebApp@1
  displayName: 'Deploy to Azure Web App'
  inputs:
    azureSubscription: 'Visual Studio Enterprise(edecda7b-57b5-41b5-845a-33e9333d4186)'
    appType: 'webApp'
    appName: 'xbl'
    package: '$(Build.ArtifactStagingDirectory)/XblWebApp.zip'
    deploymentMethod: 'auto'